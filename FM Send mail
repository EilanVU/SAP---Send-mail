FUNCTION ZFM_PM_WF_PAYREQ_EMAIL_NOTIF.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     REFERENCE(I_PAYID) TYPE  ZDD_BM_PAYID OPTIONAL
*"     REFERENCE(I_RESEND) TYPE  XMARK OPTIONAL
*"     REFERENCE(I_COMMIT) TYPE  XMARK OPTIONAL
*"  CHANGING
*"     REFERENCE(CS_PAYREQHDR) TYPE  ZST_PAYREQHDR OPTIONAL
*"     REFERENCE(CT_PAYREQSTS) TYPE  ZTT_PAYREQSTS OPTIONAL
*"----------------------------------------------------------------------

  TYPES:
    BEGIN OF LTY_DATA_KEY,
      NAME  TYPE STRING,
      VALUE TYPE STRING,
    END   OF LTY_DATA_KEY,
    LTY_T_DATA_KEY TYPE STANDARD TABLE OF LTY_DATA_KEY WITH EMPTY KEY.

  DATA:
    LT_CDS_KEY      TYPE LTY_T_DATA_KEY,
    LR_DATA         TYPE REF TO DATA,
    LS_PAYREQ_EMAIL TYPE ZCDS_PAYREQ_EMAIL,
    LO_EMAIL_API    TYPE REF TO IF_SMTG_EMAIL_API,
    LO_BCS          TYPE REF TO CL_BCS,
    LW_SENDER_EMAIL TYPE ADR6-SMTP_ADDR,
    LS_PAYREQHDR    TYPE ZTB_PAYREQHDR,
    LT_PAYREQSTS    TYPE TABLE OF ZTB_PAYREQSTS,
    LW_SUBJECT_STR  TYPE STRING,
    LW_BODY_HTML    TYPE STRING,
    LW_SUBJECT      TYPE SO_OBJ_DES,
    LW_SUBJECT_SIZE TYPE I,
    LT_BODY_TEXT    TYPE SOLI_TAB,
    LW_BODY_SIZE    TYPE I,
    LW_BODY_SIZESTR TYPE SO_OBJ_LEN,
    LO_DOCUMENT     TYPE REF TO CL_DOCUMENT_BCS.

  IF CS_PAYREQHDR IS INITIAL.
    SELECT SINGLE *
      FROM ZTB_PAYREQHDR
      INTO LS_PAYREQHDR
     WHERE PAYID = I_PAYID
       AND CANCELED = SPACE.
    CHECK SY-SUBRC IS INITIAL.

    SELECT *
      FROM ZTB_PAYREQSTS
      INTO TABLE LT_PAYREQSTS
     WHERE PAYID = I_PAYID
       AND WFNAME = LS_PAYREQHDR-WFNAME
       AND WFSTEP = LS_PAYREQHDR-WFSTEP.
    CHECK SY-SUBRC IS INITIAL.
  ELSE.
    MOVE-CORRESPONDING CS_PAYREQHDR TO LS_PAYREQHDR.
    MOVE-CORRESPONDING CT_PAYREQSTS TO LT_PAYREQSTS.
    LOOP AT LT_PAYREQSTS ASSIGNING FIELD-SYMBOL(<LF_PAYREQSTS>).
      <LF_PAYREQSTS>-PAYID = LS_PAYREQHDR-PAYID.
    ENDLOOP.
  ENDIF.

* Create Business Communication Service object
  LO_BCS = CL_BCS=>CREATE_PERSISTENT( ).

* Get email template
  CASE LS_PAYREQHDR-APVST.
    WHEN GC_APPROVAL_STATUS-APPROVED.
      IF LS_PAYREQHDR-CEMSD IS INITIAL
      OR I_RESEND IS NOT INITIAL.
        LS_PAYREQHDR-CEMSD = LS_PAYREQHDR-CEMSD + 1.
        LO_EMAIL_API = CL_SMTG_EMAIL_API=>GET_INSTANCE( IV_TEMPLATE_ID = 'ZET_PAYREQ_APRV' ).
      ELSE.
        RETURN.
      ENDIF.

*     Set Email Receiver(s)
      TRY.
*         Set Sap inbox Receiver(s)
          DATA(LO_RECIPIENT) = CL_SAPUSER_BCS=>CREATE( LS_PAYREQHDR-CRUSR ).
          LO_BCS->ADD_RECIPIENT( EXPORTING I_RECIPIENT = LO_RECIPIENT ).

          DATA(LO_RECIPIENT_EMAIL) = CL_CAM_ADDRESS_BCS=>CREATE_USER_HOME_ADDRESS(
            I_USER     = LS_PAYREQHDR-CRUSR
            I_COMMTYPE = 'INT' ).
          LO_BCS->ADD_RECIPIENT( EXPORTING I_RECIPIENT = LO_RECIPIENT_EMAIL ).
        CATCH CX_ADDRESS_BCS.
          RETURN.
      ENDTRY.
    WHEN GC_APPROVAL_STATUS-REJECTED.
      IF LS_PAYREQHDR-CEMSD IS INITIAL
      OR I_RESEND IS NOT INITIAL.
        LS_PAYREQHDR-CEMSD = LS_PAYREQHDR-CEMSD + 1.
        LO_EMAIL_API = CL_SMTG_EMAIL_API=>GET_INSTANCE( IV_TEMPLATE_ID = 'ZET_PAYREQ_REJC' ).
      ELSE.
        RETURN.
      ENDIF.

*     Send email to creator
      TRY.
*         Set Sap inbox Receiver(s)
          LO_RECIPIENT = CL_SAPUSER_BCS=>CREATE( LS_PAYREQHDR-CRUSR ).
          LO_BCS->ADD_RECIPIENT( EXPORTING I_RECIPIENT = LO_RECIPIENT ).

          LO_RECIPIENT_EMAIL = CL_CAM_ADDRESS_BCS=>CREATE_USER_HOME_ADDRESS(
            I_USER     = LS_PAYREQHDR-CRUSR
            I_COMMTYPE = 'INT' ).
          LO_BCS->ADD_RECIPIENT( EXPORTING I_RECIPIENT = LO_RECIPIENT_EMAIL ).
        CATCH CX_ADDRESS_BCS.
          RETURN.
      ENDTRY.

*     Send email to previous approvers
      LOOP AT LT_PAYREQSTS ASSIGNING <LF_PAYREQSTS>
        WHERE WFSTEP < LS_PAYREQHDR-WFSTEP.
        <LF_PAYREQSTS>-CEMSD = <LF_PAYREQSTS>-CEMSD + 1.

*       Set Email Receiver(s)
        TRY.
*           Set Sap inbox Receiver(s)
            LO_RECIPIENT = CL_SAPUSER_BCS=>CREATE( <LF_PAYREQSTS>-APVUS ).
            LO_BCS->ADD_RECIPIENT( EXPORTING I_RECIPIENT = LO_RECIPIENT ).

            LO_RECIPIENT_EMAIL = CL_CAM_ADDRESS_BCS=>CREATE_USER_HOME_ADDRESS(
              I_USER     = <LF_PAYREQSTS>-APVUS
              I_COMMTYPE = 'INT' ).
            LO_BCS->ADD_RECIPIENT( EXPORTING I_RECIPIENT = LO_RECIPIENT_EMAIL ).
          CATCH CX_ADDRESS_BCS.
            RETURN.
        ENDTRY.
      ENDLOOP.
    WHEN GC_APPROVAL_STATUS-INAPPROVAL.
      LOOP AT LT_PAYREQSTS ASSIGNING <LF_PAYREQSTS>
        WHERE WFSTEP = LS_PAYREQHDR-WFSTEP.
        IF <LF_PAYREQSTS>-CEMSD IS INITIAL
        OR I_RESEND IS NOT INITIAL.
          <LF_PAYREQSTS>-CEMSD = <LF_PAYREQSTS>-CEMSD + 1.
          LO_EMAIL_API = CL_SMTG_EMAIL_API=>GET_INSTANCE( IV_TEMPLATE_ID = 'ZET_PAYREQ_CREATE' ).
        ELSE.
          RETURN.
        ENDIF.

*       Set Email Receiver(s)
        TRY.
*           Set Sap inbox Receiver(s)
            LO_RECIPIENT = CL_SAPUSER_BCS=>CREATE( <LF_PAYREQSTS>-APVUS ).
            LO_BCS->ADD_RECIPIENT( EXPORTING I_RECIPIENT = LO_RECIPIENT ).

            LO_RECIPIENT_EMAIL = CL_CAM_ADDRESS_BCS=>CREATE_USER_HOME_ADDRESS(
              I_USER     = <LF_PAYREQSTS>-APVUS
              I_COMMTYPE = 'INT' ).
            LO_BCS->ADD_RECIPIENT( EXPORTING I_RECIPIENT = LO_RECIPIENT_EMAIL ).
          CATCH CX_ADDRESS_BCS.
            RETURN.
        ENDTRY.
      ENDLOOP.
      IF SY-SUBRC IS NOT INITIAL.
        RETURN.
      ENDIF.
    WHEN OTHERS.
      RETURN.
  ENDCASE.
  CHECK LO_EMAIL_API IS BOUND.

* Get default Email Sender
  SELECT SINGLE *
    FROM TVARVC
    INTO @DATA(LS_EMAIL)
    WHERE NAME = 'ZVAR_DEFAULT_EMAIL'.

  LW_SENDER_EMAIL = LS_EMAIL-LOW.

  TRY.
*     Set Email Sender
      IF LW_SENDER_EMAIL IS NOT INITIAL.
        DATA(LO_SENDER_EMAIL) = CL_CAM_ADDRESS_BCS=>CREATE_INTERNET_ADDRESS(
          I_ADDRESS_STRING = LW_SENDER_EMAIL
          I_ADDRESS_NAME   = 'SAP EWH' ).
*          I_ADDRESS_NAME   = LW_SENDER_EMAIL ).
        LO_BCS->SET_SENDER( I_SENDER = LO_SENDER_EMAIL ).
      ELSE.
        DATA(LO_SENDER) = CL_SAPUSER_BCS=>CREATE( SY-UNAME ).
        LO_BCS->SET_SENDER( I_SENDER = LO_SENDER ).
      ENDIF.
    CATCH CX_ADDRESS_BCS.
      RETURN.
  ENDTRY.

* Set email data content
  LT_CDS_KEY = VALUE LTY_T_DATA_KEY(
                ( NAME = 'PAYID' VALUE = LS_PAYREQHDR-PAYID ) ).

*  LO_EMAIL_API->USE_HTML_TIDY_FOR_RENDER( 'X' ).

  IF LS_PAYREQHDR-APVST = GC_APPROVAL_STATUS-INAPPROVAL OR 1 = 1.
    TRY.
        CALL METHOD LO_EMAIL_API->RENDER
          EXPORTING
            IV_LANGUAGE  = SY-LANGU
            IT_DATA_KEY  = LT_CDS_KEY
          IMPORTING
            EV_SUBJECT   = LW_SUBJECT_STR
            EV_BODY_HTML = LW_BODY_HTML.
      CATCH CX_SMTG_EMAIL_COMMON.
        RETURN.
    ENDTRY.

    LW_SUBJECT = LW_SUBJECT_STR.
    LW_SUBJECT_SIZE = STRLEN( LW_SUBJECT_STR ).

    LW_BODY_SIZE = STRLEN( LW_BODY_HTML ).
    CALL FUNCTION 'CONVERT_STRING_TO_TABLE'
      EXPORTING
        I_STRING         = LW_BODY_HTML
        I_TABLINE_LENGTH = 255
*       I_UNICODE        = 'X'
      TABLES
        ET_TABLE         = LT_BODY_TEXT.
    LW_BODY_SIZE = STRLEN( LW_BODY_HTML ) + LW_SUBJECT_SIZE.
    LW_BODY_SIZESTR = LW_BODY_SIZE.
    CONDENSE LW_BODY_SIZESTR.

    LO_DOCUMENT = CL_DOCUMENT_BCS=>CREATE_DOCUMENT(
      I_TYPE    = 'HTM'
      I_LENGTH  = LW_BODY_SIZESTR
      I_TEXT    = LT_BODY_TEXT
      I_SUBJECT = LW_SUBJECT ).
    LO_BCS->SET_DOCUMENT( LO_DOCUMENT ).
    LO_BCS->SET_MESSAGE_SUBJECT(
      EXPORTING
        IP_SUBJECT = LW_SUBJECT_STR ).


*    DATA: LT_SHORTCUT    TYPE SOLI_TAB,
*          LW_ATTC_LENGTH TYPE I,
*          LW_PARAMETER   TYPE  TEXT255.
*
*    LW_PARAMETER = |P_TPREQ=X; P_PMSTY={ LS_PAYREQHDR-PMSTY }; P_PDATE=;S_PAYID-LOW={ LS_PAYREQHDR-PAYID }|.
**   Now we build the executable SAP Shortcut
*    CALL FUNCTION 'SWN_CREATE_SHORTCUT'
*      EXPORTING
*        I_TRANSACTION           = '*ZPAY4'
*        I_PARAMETER             = LW_PARAMETER
*        I_WINDOWSIZE            = 'Maximized'
*        I_USER                  = <LF_PAYREQSTS>-APVUS
*      IMPORTING
*        SHORTCUT_TABLE          = LT_SHORTCUT
*      EXCEPTIONS
*        INCONSISTENT_PARAMETERS = 1
*        OTHERS                  = 2.
*
*    DESCRIBE TABLE LT_SHORTCUT LINES LW_ATTC_LENGTH.
*
*    TRY.
*        CALL METHOD LO_DOCUMENT->ADD_ATTACHMENT
*          EXPORTING
*            I_ATTACHMENT_TYPE    = 'SAP'
*            I_ATTACHMENT_SUBJECT = 'Approve.SAP'
**           I_ATTACHMENT_SIZE    = lv_attc_length
*            I_ATT_CONTENT_TEXT   = LT_SHORTCUT.
*      CATCH CX_DOCUMENT_BCS.
*    ENDTRY.


  ELSE.
    LO_EMAIL_API->RENDER_BCS( IO_BCS      = LO_BCS
                              IV_LANGUAGE = SY-LANGU
                              IT_DATA_KEY = LT_CDS_KEY ).
  ENDIF.


* Send Email
  LO_BCS->SET_SEND_IMMEDIATELY( 'X' ).
  LO_BCS->SEND( ).

  CS_PAYREQHDR-CEMSD = LS_PAYREQHDR-CEMSD.
  LOOP AT CT_PAYREQSTS ASSIGNING FIELD-SYMBOL(<LF_PAYREQSTS2>).
    READ TABLE LT_PAYREQSTS ASSIGNING <LF_PAYREQSTS>
      WITH KEY WFNAME = <LF_PAYREQSTS2>-WFNAME
               WFSTEP = <LF_PAYREQSTS2>-WFSTEP
               FUNCTION = <LF_PAYREQSTS2>-FUNCTION
               APVUS = <LF_PAYREQSTS2>-APVUS.
    IF SY-SUBRC IS INITIAL.
      <LF_PAYREQSTS2>-CEMSD = <LF_PAYREQSTS>-CEMSD.
    ENDIF.
  ENDLOOP.

  IF I_COMMIT IS NOT INITIAL.
    UPDATE ZTB_PAYREQHDR FROM LS_PAYREQHDR.
    UPDATE ZTB_PAYREQSTS FROM TABLE LT_PAYREQSTS.
    COMMIT WORK AND WAIT.
  ENDIF.


ENDFUNCTION.
